#ifndef EBO_H
#define EBO_H

#include <QDebug>

/*
    Empty Base Optimization. Оптимизация пустого базового класса. Так же может называться Empty Base Class Optimization (EBCO).
    Как известно, в C++ размер объекта любого класса не может быть нулем. Иначе сломается вся арифметика указателей,
    т. к. по одному адресу будет возможно разметить сколько угодно разных объектов.

    Поэтому даже объекты пустых классов (т. е. классов без единого нестатического поля) имеют какой-то ненулевой размер,
    который зависит от компилятора и ОС и обычно равен 1.
    Таким образом память зря тратится на все объекты пустых классов. Но не объекты их потомков,
    т. к. в данном случае Стандарт явно делает исключение.
    Компилятору разрешено не выделять память под пустой базовый класс и экономить таким образом не только 1 байт пустого класса,
    а все 4 (зависит от платформы), т. к. есть еще и выравнивание.
*/
namespace ebo
{
    //
    struct Empty {};

    //
    struct Foo : Empty
    {
        int i;
    };

    //
    void test()
    {
        qDebug() << sizeof(Empty);    // 1
        qDebug() << sizeof(Foo);      // 4
        qDebug() << sizeof(int);      // 4
    }
}

#endif // EBO_H
